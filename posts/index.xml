<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on thalesbruno</title>
		<link>https://thalesbruno.github.io/posts/</link>
		<description>Recent content in Posts on thalesbruno</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 02 Apr 2021 22:33:59 -0300</lastBuildDate>
		<atom:link href="https://thalesbruno.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Django and Bootstrap: basic setup</title>
			<link>https://thalesbruno.github.io/posts/django-bootstrap/</link>
			<pubDate>Fri, 02 Apr 2021 22:33:59 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/django-bootstrap/</guid>
			<description>The purpose here is to create a basic setup of a Django project already integrated with Bootstrap and Font Awesome, which can be the base of your projects.
If you want to check out the code, just go to the Github repository page here.
Create the Django project First of all, we create the project root directory
~: $ mkdir project ~: $ cd project/ So, we set up a Python virtual environment called venv where we will install the dependencies of our project.</description>
			<content type="html"><![CDATA[<p>The purpose here is to create a basic setup of a Django project already integrated with Bootstrap and Font Awesome, which can be the base of your projects.</p>
<p>If you want to check out the code, just go to the Github <a href="https://github.com/thalesbruno/django_bootstrap">repository page here</a>.</p>
<h2 id="create-the-django-project">Create the Django project</h2>
<p>First of all, we create the project root directory</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">~: $ mkdir project
~: $ <span class="nb">cd</span> project/
</code></pre></div><p>So, we set up a Python <a href="https://realpython.com/python-virtual-environments-a-primer/">virtual environment</a> called <code>venv</code> where we will install the dependencies of our project. We activate it and install Django. Code below.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">~/project: $ python3 -m venv venv
~/project: $ <span class="nb">source</span> venv/bin/activate
<span class="o">(</span>venv<span class="o">)</span> ~/project: $ pip install Django
</code></pre></div><p>Django installed, the next step is to create a Django project. We create a <code>src/</code> directory and run the <code>django-project</code> command inside it. We called the project <code>core</code> and the dot indicates we are building it in the current directory.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">(</span>venv<span class="o">)</span> ~/project: $ mkdir src
<span class="o">(</span>venv<span class="o">)</span> ~/project: $ <span class="nb">cd</span> src/
<span class="o">(</span>venv<span class="o">)</span> ~/project/src: $ django-admin startproject core .
</code></pre></div><p>Now we create two more directories: <code>static</code>, where we will put the Bootstrap and Font Awesome files, and <code>templates</code>, where we will put our HTML template files.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">(</span>venv<span class="o">)</span> ~/project/src: $ mkdir static templates
</code></pre></div><p>Ready to run the Django service. For that, we first apply the migrations (for the default applications Django comes with, like admin, auth, etc.), and so run the server.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">(</span>venv<span class="o">)</span> ~/project/src: $ python manage.py migrate
<span class="o">(</span>venv<span class="o">)</span> ~/project/src: $ python manage.py runserver
</code></pre></div><p>If everything went well the service must be accessible at <code>http://127.0.0.1:8000</code>.</p>
<h2 id="bootstrap-and-font-awesome-integration">Bootstrap and Font-awesome integration</h2>
<p>So, with the Django project built, we integrate Bootstrap and Font Awesome sources on it.</p>
<h3 id="bootstrap">Bootstrap</h3>
<p>In the Bootstrap <a href="https://getbootstrap.com/docs/4.3/getting-started/download/">Downloads</a> page, we chose <code>Compiled CSS and JS</code>, ready-to-use compiled code. It&rsquo;s the first option on the web page.</p>
<p>We unzip the package and copy its two directories <code>js</code> and <code>css</code> to the directory <code>/project/src/static/</code> in our project. Almost there, before leaving this step we remove all unnecessary files in the <code>js</code> and <code>css</code> folders. We only keep with <code>bootstrap.min.js and bootstrap.min.js.map</code> in the <code>js</code>, and with <code>bootstrap.min.css and bootstrap.min.css.map</code> in the <code>css</code>.</p>
<h3 id="font-awesome">Font-awesome</h3>
<p>With Django and Bootstrap integrated we already have a pretty good setup, but we can also integrate with Font Awesome as the icing on the cake.</p>
<p>In the Font Awesome official website, we download its Free Package on <a href="https://fontawesome.com/how-to-use/on-the-web/setup/hosting-font-awesome-yourself">this link</a>.</p>
<p>We create a <code>fa</code> subdirectory on our project <code>/project/src/static/fa/</code> and so we unzip the Font Awesome package and copy the <code>webfonts</code> and <code>css</code> folders there. We also remove unnecessary files in <code>/project/src/static/fa/css</code>, keeping only the <code>all.min.css</code>.</p>
<h2 id="integrating-everything">Integrating everything</h2>
<p>The final step is integrating everything.</p>
<p>We edit the <code>/project/src/core/settings.py</code> file, adding a line with a relative reference to the <code>static</code> directory.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">STATICFILES_DIRS</span> <span class="o">=</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s1">&#39;static&#39;</span><span class="p">)]</span>
</code></pre></div><p>In the same file, we also edit the section about <code>TEMPLATES</code>, specifically its <code>DIR</code> value to the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
     <span class="c1"># -- some code up there --</span>
        <span class="s1">&#39;DIRS&#39;</span><span class="p">:</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="n">BASE_DIR</span><span class="p">),</span> <span class="s1">&#39;templates/&#39;</span><span class="p">)],</span>
     <span class="c1"># -- some code down there</span>
</code></pre></div><h3 id="views-and-urls">Views and URLs</h3>
<p>Before creating templates, we do some logic stuff.</p>
<p>In Django, we map all the URLs our application serves in the <code>urls.py</code> file. So, we create an URL on the root that, when accessed, call a view, i.e. a function inside <code>views.py</code>, which is who will be handling the request and rendering the result page to the user.</p>
<p><code>urls.py</code> file:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.views</span> <span class="kn">import</span> <span class="n">index</span>


<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s1">&#39;admin/&#39;</span><span class="p">,</span> <span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">index</span><span class="p">),</span>
<span class="p">]</span>

</code></pre></div><p><code>views.py</code> file:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>


<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="p">{})</span>
</code></pre></div><p>At this point, we only need an <code>index.html</code> template file.</p>
<h3 id="templates">Templates</h3>
<p>The very final step, I swear, is creating the <code>index.html</code> file. We create it from the scratch at the templates directory, and we use <a href="https://jinja.palletsprojects.com/en/2.10.x/">Jinja</a> template language.</p>
<p>At the beginning of the file, we load the static files.</p>
<pre><code>{% load static %}
</code></pre><p>In the <code>head</code> HTML section we put the references to the CSS and JS files.</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{% static &#39;css/bootstrap.min.css&#39; %}&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{% static &#39;fa/css/all.min.css&#39; %}&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;{% static &#39;js/bootstrap.min.js&#39; %}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div><p>Well done! We are ready to write HTML code using Bootstrap and Font Awesome as a visual pattern! In the GitHub repository of this project, we can see an <code>index.html</code> sample already using some Bootstrap components, which seems like this:</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/fuo71kza50tuce68nhnv.png" alt="Django and Bootstrap generic page"></p>
]]></content>
		</item>
		
		<item>
			<title>Criando um Bot do Telegram com Node.js</title>
			<link>https://thalesbruno.github.io/posts/criando-bot-telegram-nodejs/</link>
			<pubDate>Tue, 16 Mar 2021 05:22:28 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/criando-bot-telegram-nodejs/</guid>
			<description>Olá, pessoal. Este é meu primeiro artigo por aqui e nele vamos aprender a fazer um Bot do Telegram que monitora serviços através de requisições HTTP. Fiz em Javascript/Node.js porque era a linguagem que eu vinha estudando ultimamente então foi uma boa oportunidade de aplicá-la e eu gostei do resultado.
As tecnologias trabalhadas aqui foram o Node.js, o Telegraf, que é um framework para construir Bots do Telegram em Node, o Axios, um cliente HTTP em Javascript, e o Docker para dar um toque mais profissional, rs.</description>
			<content type="html"><![CDATA[<p>Olá, pessoal. Este é meu primeiro artigo por aqui e nele vamos aprender a fazer um Bot do Telegram que monitora serviços através de requisições HTTP. Fiz em Javascript/Node.js porque era a linguagem que eu vinha estudando ultimamente então foi uma boa oportunidade de aplicá-la e eu gostei do resultado.</p>
<p>As tecnologias trabalhadas aqui foram o Node.js, o <a href="https://telegraf.js.org/#/">Telegraf</a>, que é um framework para construir Bots do Telegram em Node, o <a href="https://github.com/axios/axios">Axios</a>, um cliente HTTP em Javascript, e o Docker para dar um toque mais profissional, rs. Tem também o próprio Telegram, naturalmente, onde vamos iniciar a criação do Bot e vê-lo funcionar.</p>
<p>Acho que um bom ponto de partida é entrar no Telegram e criar nosso Bot. Poucas coisas na vida são mais fáceis que isso: basta procurar pela conta BotFather:</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/hma51pv4cmt2b1donht3.png" alt="BotFather"></p>
<p>Ao iniciar uma conversa com o Pai dos Bots, são exibidos os comandos disponíveis para interagir com ele. Digitamos ou clicamos em <code>/newbot</code>, definimos um nome e em seguida um <em>username</em>, que deve obrigatoriamente terminar em &lsquo;bot&rsquo;. Feito isso, nosso Bot estará criado e o BotFather disponibilizará um token de acesso que usaremos daqui pra frente para comandar nosso Bot. O BotFather nos aconselha a manter o token em segurança, já que ele pode ser usado por qualquer um para controlar nosso Bot.</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/x5ycgcn4i81223k0euy7.png" alt="Bot Criado"></p>
<p>Vamos agora ao Node.js. Primeiro, criamos um diretório raiz pro projeto e dentro dele o <code>/src</code> onde ficará o código Javascript:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir -p telegram-bot/src
<span class="nb">cd</span> telegram-bot
</code></pre></div><p>Então, inicializamos o projeto&hellip;</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">npm init -y
</code></pre></div><p>&hellip;e instalamos o módulo Telegraf</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">npm install telegraf
</code></pre></div><p>Agora as primeiras linhas de código. Criamos um arquivo <code>index.js</code> em <code>./telegram-bot/src</code> que será o <em>entrypoint</em> do projeto:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">Telegraf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;telegraf&#39;</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">bot</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Telegraf</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">BOT_TOKEN</span><span class="p">)</span>

<span class="nx">bot</span><span class="p">.</span><span class="nx">start</span><span class="p">((</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">reply</span><span class="p">(</span><span class="s2">&#34;Hello world&#34;</span><span class="p">))</span>

<span class="nx">bot</span><span class="p">.</span><span class="nx">launch</span><span class="p">()</span>
</code></pre></div><p>Nele, primeiro importamos o módulo Telegraf, então instanciamos um objeto bot, passando um único argumento, <code>process.env.BOT_TOKEN</code> (falaremos dele no próximo parágrafo). Em seguida, criamos nossa primeira &ldquo;rota&rdquo;, <code>bot.start()</code>, aqui estabelecemos o que o Bot fará ao receber o comando <code>/start</code> (isso acontece ao iniciarmos pela primeira vez uma conversa com ele ou, após isso, digitarmos <code>/start</code> no chat). Nesta versão inicial de nosso código, ele apenas responderá com um &ldquo;Hello world&rdquo;. Por fim, na última linha temos <code>bot.launch()</code> que inicializa o Bot.</p>
<p>Sobre o <code>process.env.BOT_TOKEN</code>, o <code>process.env</code> retorna um objeto contendo as variáveis de ambiente do usuário, e destas estamos pegando a que nos interessa que é a BOT_TOKEN. Uma alternativa seria passar o token diretamente no código, o que é completamente desaconselhável. Agora falta criarmos a variável de ambiente BOT_TOKEN e atribuir a ela o token que o BotFather nos passou instantes atrás. Neste momento vamos apenas exportar nossa variável no terminal (Linux/MacOS), mas depois, quando subirmos nosso projeto em uma imagem Docker, vamos usar uma solução mais elegante.</p>
<p>Então, no terminal basta executar:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">BOT_TOKEN</span><span class="o">=</span>&lt;O_TOKEN_QUE_O_BOTFATHER_NOS_PASSOU&gt;
</code></pre></div><p>Nosso Bot já está pronto para ser executado! No diretório raiz, rodamos:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">node src/index.js
</code></pre></div><p>No Telegram, já podemos interagir com ele:</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/pe3dk6rppezzeultcazf.png" alt="Bot start"></p>
<p>O que precisamos implementar agora é uma rota <code>status</code> que chamará um módulo responsável por fazer a requisição ao serviço, retornando seu status que, por sua vez, gerará uma resposta de nosso Bot.</p>
<p>Vamos instalar o axios, que é um módulo cliente HTTP.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">npm install axios
</code></pre></div><p>Novo arquivo<code>src/status.js</code>, bem simplezinho, checando o status da página inicial do Google:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;axios&#39;</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;https://www.google.com/&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">timeout</span><span class="o">:</span> <span class="mi">30000</span> <span class="p">})</span>
    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">error</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">status</span>
</code></pre></div><p>No arquivo principal do projeto, <code>src/index.js</code>, vamos importar o módulo status e criar a rota que o chamará:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./status&#39;</span><span class="p">)</span>

<span class="p">...</span>

<span class="nx">bot</span><span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">&#39;status&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">status</span><span class="p">()</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">await</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">reply</span><span class="p">(</span><span class="sb">`Google service: ✅`</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">await</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">reply</span><span class="p">(</span><span class="sb">`Google service: ❌`</span><span class="p">)</span>
        <span class="p">}</span>

    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div><p>Projeto salvo, rodamos novamente o <code>node src/index.js</code> e vamos lá falar com nosso Bot:</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/oa397tt7dgkrhcb73ow1.png" alt="Bot status"></p>
<p>Prontinho! Se o serviço Google tiver fora do ar, o que é meio difícil, ele vai responder com o ❌.</p>
<p>Vamos fazer um ajuste no <code>package.json</code> para rodarmos nossa aplicação com  <code>npm start</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="err">...</span>

<span class="s2">&#34;scripts&#34;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&#34;start&#34;</span><span class="p">:</span> <span class="s2">&#34;node src/index.js&#34;</span>
  <span class="p">}</span>

<span class="err">...</span>
</code></pre></div><p>Agora pra finalizar, vamos subir nosso projeto em Docker (e docker-compose)! Primeiro criamos um Dockerfile pra será o build de nossa imagem e depois um docker-compose.yml que subirá o serviço. São provavelmente os exemplos mais simples de <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a> e <a href="https://docs.docker.com/compose/compose-file/">docker-compose</a> que vocês verão por aí:</p>
<p>Dockerfile</p>
<div class="highlight"><pre class="chroma"><code class="language-docker" data-lang="docker"><span class="k">FROM</span><span class="s"> node:12.7.0-alpine</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> . .<span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="o">[</span><span class="s2">&#34;npm&#34;</span>, <span class="s2">&#34;install&#34;</span><span class="o">]</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">ENV</span> <span class="nv">BOT_TOKEN</span><span class="o">=</span>&lt;PUT_YOUR_TELEGRAM_TOKEN_BOT_HERE&gt;<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;npm&#34;</span><span class="p">,</span> <span class="s2">&#34;start&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></div><p>docker-compose.yml</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="k">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w"></span><span class="k">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">bot</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">build</span><span class="p">:</span><span class="w"> </span>.<span class="w">
</span></code></pre></div><p>(Sim, é só isso). Lembrando que os dois arquivos devem estar na raiz do projeto, no Dockerfile colocamos ali em <code>ENV BOT_TOKEN</code> o mesmo token que já vínhamos usando.</p>
<p>Agora vamos colocar nosso Bot no ar novamente, mas dessa vez usando <a href="https://docs.docker.com/compose/gettingstarted/">docker-compose</a>:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker-compose up -d
</code></pre></div><p>O <code>-d</code> é pra ele subir em background, liberando o promp do terminal. Pra parar o serviço é <code>docker-compose down</code>. Se fizer alguma modificação no código, é só rodar <code>docker-compose up -d --build</code> que ele subirá construindo uma nova imagem.</p>
<p>Com o Bot no ar em Docker, podemos ir no Telegram novamente e continuar interagindo com nosso Bot!</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/freeek44riannbdr9jrt.png" alt="Docker bot"></p>
<p>Essa é uma versão bem simples e genérica, só pra ilustrar a implementação e o funcionamento. Pro artigo não ficar ainda maior, abstraí algumas explicações de códigos e comandos, mas coloquei os links com as referências de cada tecnologia. Qualquer dúvida é só dar um alô!</p>
]]></content>
		</item>
		
	</channel>
</rss>
