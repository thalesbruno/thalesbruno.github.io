<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on thalesbruno</title>
		<link>https://thalesbruno.github.io/posts/</link>
		<description>Recent content in Posts on thalesbruno</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 16 Mar 2021 05:22:28 -0300</lastBuildDate>
		<atom:link href="https://thalesbruno.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Criando um Bot do Telegram com Node.js</title>
			<link>https://thalesbruno.github.io/posts/post/</link>
			<pubDate>Tue, 16 Mar 2021 05:22:28 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/post/</guid>
			<description>Olá, pessoal. Este é meu primeiro artigo por aqui e nele vamos aprender a fazer um Bot do Telegram que monitora serviços através de requisições HTTP. Fiz em Javascript/Node.js porque era a linguagem que eu vinha estudando ultimamente então foi uma boa oportunidade de aplicá-la e eu gostei do resultado.
As tecnologias trabalhadas aqui foram o Node.js, o Telegraf, que é um framework para construir Bots do Telegram em Node, o Axios, um cliente HTTP em Javascript, e o Docker para dar um toque mais profissional, rs.</description>
			<content type="html"><![CDATA[<p>Olá, pessoal. Este é meu primeiro artigo por aqui e nele vamos aprender a fazer um Bot do Telegram que monitora serviços através de requisições HTTP. Fiz em Javascript/Node.js porque era a linguagem que eu vinha estudando ultimamente então foi uma boa oportunidade de aplicá-la e eu gostei do resultado.</p>
<p>As tecnologias trabalhadas aqui foram o Node.js, o <a href="https://telegraf.js.org/#/">Telegraf</a>, que é um framework para construir Bots do Telegram em Node, o <a href="https://github.com/axios/axios">Axios</a>, um cliente HTTP em Javascript, e o Docker para dar um toque mais profissional, rs. Tem também o próprio Telegram, naturalmente, onde vamos iniciar a criação do Bot e vê-lo funcionar.</p>
<p>Acho que um bom ponto de partida é entrar no Telegram e criar nosso Bot. Poucas coisas na vida são mais fáceis que isso: basta procurar pela conta BotFather:</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/hma51pv4cmt2b1donht3.png" alt="BotFather"></p>
<p>Ao iniciar uma conversa com o Pai dos Bots, são exibidos os comandos disponíveis para interagir com ele. Digitamos ou clicamos em <code>/newbot</code>, definimos um nome e em seguida um <em>username</em>, que deve obrigatoriamente terminar em &lsquo;bot&rsquo;. Feito isso, nosso Bot estará criado e o BotFather disponibilizará um token de acesso que usaremos daqui pra frente para comandar nosso Bot. O BotFather nos aconselha a manter o token em segurança, já que ele pode ser usado por qualquer um para controlar nosso Bot.</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/x5ycgcn4i81223k0euy7.png" alt="Bot Criado"></p>
<p>Vamos agora ao Node.js. Primeiro, criamos um diretório raiz pro projeto e dentro dele o <code>/src</code> onde ficará o código Javascript:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir -p telegram-bot/src
<span class="nb">cd</span> telegram-bot
</code></pre></div><p>Então, inicializamos o projeto&hellip;</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">npm init -y
</code></pre></div><p>&hellip;e instalamos o módulo Telegraf</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">npm install telegraf
</code></pre></div><p>Agora as primeiras linhas de código. Criamos um arquivo <code>index.js</code> em <code>./telegram-bot/src</code> que será o <em>entrypoint</em> do projeto:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">Telegraf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;telegraf&#39;</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">bot</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Telegraf</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">BOT_TOKEN</span><span class="p">)</span>

<span class="nx">bot</span><span class="p">.</span><span class="nx">start</span><span class="p">((</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">reply</span><span class="p">(</span><span class="s2">&#34;Hello world&#34;</span><span class="p">))</span>

<span class="nx">bot</span><span class="p">.</span><span class="nx">launch</span><span class="p">()</span>
</code></pre></div><p>Nele, primeiro importamos o módulo Telegraf, então instanciamos um objeto bot, passando um único argumento, <code>process.env.BOT_TOKEN</code> (falaremos dele no próximo parágrafo). Em seguida, criamos nossa primeira &ldquo;rota&rdquo;, <code>bot.start()</code>, aqui estabelecemos o que o Bot fará ao receber o comando <code>/start</code> (isso acontece ao iniciarmos pela primeira vez uma conversa com ele ou, após isso, digitarmos <code>/start</code> no chat). Nesta versão inicial de nosso código, ele apenas responderá com um &ldquo;Hello world&rdquo;. Por fim, na última linha temos <code>bot.launch()</code> que inicializa o Bot.</p>
<p>Sobre o <code>process.env.BOT_TOKEN</code>, o <code>process.env</code> retorna um objeto contendo as variáveis de ambiente do usuário, e destas estamos pegando a que nos interessa que é a BOT_TOKEN. Uma alternativa seria passar o token diretamente no código, o que é completamente desaconselhável. Agora falta criarmos a variável de ambiente BOT_TOKEN e atribuir a ela o token que o BotFather nos passou instantes atrás. Neste momento vamos apenas exportar nossa variável no terminal (Linux/MacOS), mas depois, quando subirmos nosso projeto em uma imagem Docker, vamos usar uma solução mais elegante.</p>
<p>Então, no terminal basta executar:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">export</span> <span class="nv">BOT_TOKEN</span><span class="o">=</span>&lt;O_TOKEN_QUE_O_BOTFATHER_NOS_PASSOU&gt;
</code></pre></div><p>Nosso Bot já está pronto para ser executado! No diretório raiz, rodamos:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">node src/index.js
</code></pre></div><p>No Telegram, já podemos interagir com ele:</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/pe3dk6rppezzeultcazf.png" alt="Bot start"></p>
<p>O que precisamos implementar agora é uma rota <code>status</code> que chamará um módulo responsável por fazer a requisição ao serviço, retornando seu status que, por sua vez, gerará uma resposta de nosso Bot.</p>
<p>Vamos instalar o axios, que é um módulo cliente HTTP.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">npm install axios
</code></pre></div><p>Novo arquivo<code>src/status.js</code>, bem simplezinho, checando o status da página inicial do Google:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;axios&#39;</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;https://www.google.com/&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">timeout</span><span class="o">:</span> <span class="mi">30000</span> <span class="p">})</span>
    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">error</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">status</span>
</code></pre></div><p>No arquivo principal do projeto, <code>src/index.js</code>, vamos importar o módulo status e criar a rota que o chamará:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./status&#39;</span><span class="p">)</span>

<span class="p">...</span>

<span class="nx">bot</span><span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">&#39;status&#39;</span><span class="p">,</span> <span class="nx">async</span> <span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">status</span><span class="p">()</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">await</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">reply</span><span class="p">(</span><span class="sb">`Google service: ✅`</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">await</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">reply</span><span class="p">(</span><span class="sb">`Google service: ❌`</span><span class="p">)</span>
        <span class="p">}</span>

    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div><p>Projeto salvo, rodamos novamente o <code>node src/index.js</code> e vamos lá falar com nosso Bot:</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/oa397tt7dgkrhcb73ow1.png" alt="Bot status"></p>
<p>Prontinho! Se o serviço Google tiver fora do ar, o que é meio difícil, ele vai responder com o ❌.</p>
<p>Vamos fazer um ajuste no <code>package.json</code> para rodarmos nossa aplicação com  <code>npm start</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="err">...</span>

<span class="s2">&#34;scripts&#34;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&#34;start&#34;</span><span class="p">:</span> <span class="s2">&#34;node src/index.js&#34;</span>
  <span class="p">}</span>

<span class="err">...</span>
</code></pre></div><p>Agora pra finalizar, vamos subir nosso projeto em Docker (e docker-compose)! Primeiro criamos um Dockerfile pra será o build de nossa imagem e depois um docker-compose.yml que subirá o serviço. São provavelmente os exemplos mais simples de <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a> e <a href="https://docs.docker.com/compose/compose-file/">docker-compose</a> que vocês verão por aí:</p>
<p>Dockerfile</p>
<div class="highlight"><pre class="chroma"><code class="language-docker" data-lang="docker"><span class="k">FROM</span><span class="s"> node:12.7.0-alpine</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> . .<span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="o">[</span><span class="s2">&#34;npm&#34;</span>, <span class="s2">&#34;install&#34;</span><span class="o">]</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">ENV</span> <span class="nv">BOT_TOKEN</span><span class="o">=</span>&lt;PUT_YOUR_TELEGRAM_TOKEN_BOT_HERE&gt;<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;npm&#34;</span><span class="p">,</span> <span class="s2">&#34;start&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></div><p>docker-compose.yml</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="k">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w"></span><span class="k">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">bot</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">build</span><span class="p">:</span><span class="w"> </span>.<span class="w">
</span></code></pre></div><p>(Sim, é só isso). Lembrando que os dois arquivos devem estar na raiz do projeto, no Dockerfile colocamos ali em <code>ENV BOT_TOKEN</code> o mesmo token que já vínhamos usando.</p>
<p>Agora vamos colocar nosso Bot no ar novamente, mas dessa vez usando <a href="https://docs.docker.com/compose/gettingstarted/">docker-compose</a>:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker-compose up -d
</code></pre></div><p>O <code>-d</code> é pra ele subir em background, liberando o promp do terminal. Pra parar o serviço é <code>docker-compose down</code>. Se fizer alguma modificação no código, é só rodar <code>docker-compose up -d --build</code> que ele subirá construindo uma nova imagem.</p>
<p>Com o Bot no ar em Docker, podemos ir no Telegram novamente e continuar interagindo com nosso Bot!</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/freeek44riannbdr9jrt.png" alt="Docker bot"></p>
<p>Essa é uma versão bem simples e genérica, só pra ilustrar a implementação e o funcionamento. Pro artigo não ficar ainda maior, abstraí algumas explicações de códigos e comandos, mas coloquei os links com as referências de cada tecnologia. Qualquer dúvida é só dar um alô!</p>
]]></content>
		</item>
		
		<item>
			<title>Natural Language Processing</title>
			<link>https://thalesbruno.github.io/posts/natural-language-processing/</link>
			<pubDate>Mon, 23 Nov 2020 18:39:37 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/natural-language-processing/</guid>
			<description>Photo by Emily Morter on Unsplash Voltando a escrever um post depois de algum tempo para falar de Natural Language Processing (NLP), área que comecei a estudar no primeiro semestre desse ano, gostei e que agora tornou-se oficialmente minha área de pesquisa em meu recém iniciado Mestrado em Ciência de Dados na UFBA.
 Natural Processing Language é uma subarea da linguística, ciência da computação e inteligência artificial[1], que se vale de conceitos e técnicas de cada um desses campos para o estudo e criação de mecanismos de processamento e análise de textos em linguagem natural.</description>
			<content type="html"><![CDATA[<img src="/img/nick-fewings-pIY6sz-texg-unsplash.jpg">
Photo by <a href="https://unsplash.com/@jannerboy62?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Emily Morter</a> on <a href="https://unsplash.com/s/photos/language?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>
<p>Voltando a escrever um post depois de algum tempo para falar de Natural Language Processing (NLP), área que comecei a estudar no primeiro semestre desse ano, gostei e que agora tornou-se oficialmente minha área de pesquisa em meu recém iniciado Mestrado em Ciência de Dados na UFBA.</p>
<hr>
<p>Natural Processing Language é uma subarea da linguística, ciência da computação e inteligência artificial<a href="#refer%C3%AAncias">[1]</a>, que se vale de conceitos e técnicas de cada um desses campos para o estudo e criação de mecanismos de processamento e análise de textos em linguagem natural.</p>
<p>As possibilidades de aplicação da NLP são muitas. Podemos citar, por exemplo:</p>
<ul>
<li>Reconhecimento de fala</li>
<li>Chatbots</li>
<li>Sistemas de recomendação</li>
<li>Similaridade de textos</li>
<li>Classificação de documentos</li>
</ul>
<p>Sendo esses e outros campos objetos de inúmeras pesquisas e desenvolvimento na área, que tem crescido cada vez mais na esteira da rápida evolução da Data Science, Big Data e da Inteligência Artificial.</p>
<p>Nos próximos posts trarei algumas aplicações práticas que tenho desenvolvido nas últimas semanas. Até lá :)</p>
<h2 id="referências">Referências</h2>
<p>[1] Wikipedia contributors, &ldquo;Natural language processing,&rdquo; Wikipedia, The Free Encyclopedia, <a href="https://en.wikipedia.org/wiki/Natural_language_processing">&lt;https://en.wikipedia.org/wiki/Natural_language_processing&gt;</a>  (acessado em 21-11-2020).</p>
]]></content>
		</item>
		
		<item>
			<title>Handling Missing Values</title>
			<link>https://thalesbruno.github.io/posts/handling-missing-values/</link>
			<pubDate>Thu, 06 Aug 2020 08:23:11 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/handling-missing-values/</guid>
			<description>Photo by Emily Morter on Unsplash A key part of data science is to clean the data before work with it. For example, it&amp;rsquo;s common finding missing values in a dataset, either because that data was not collected or don&amp;rsquo;t exist though.
Depends on the data we have missing, or even why we don&amp;rsquo;t have it, we handle it in different ways. So, we need to analyze each dataset column carefully and decide whether we will remove all rows with missing values, or remove the column itself, or fill the cells with some data (and which data could be).</description>
			<content type="html"><![CDATA[<img src="/img/emily-morter-8xAA0f9yQnE-unsplash.jpg">
Photo by <a href="https://unsplash.com/@emilymorter?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Emily Morter</a> on <a href="https://unsplash.com/s/photos/missing?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>
<p>A key part of data science is to clean the data before work with it. For example, it&rsquo;s common finding missing values in a dataset, either because that data was not collected or don&rsquo;t exist though.</p>
<p>Depends on the data we have missing, or even why we don&rsquo;t have it, we handle it in different ways. So, we need to analyze each dataset column carefully and decide whether we will remove all rows with missing values, or remove the column itself, or fill the cells with some data (and which data could be).</p>
<h2 id="count-missing-values">Count missing values</h2>
<p>Before handle the missing values, we should know exactly how much of them we have. The code below counts all missing values in a pandas DataFrame <code>df</code> and print it all by column.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</code></pre></div><p>Output:</p>
<pre><code>budget                     0
genres                    28
homepage                3091
id                         0
keywords                 412
original_language          0
</code></pre><h2 id="check-relative-data-missing">Check relative data missing</h2>
<p>So, we know we have missing values in our dataset, and now we may figure out the proportion of missing values in relation to all data. To do this we sum the missing values, divide by the number of cells, and multiply by 100, as we can in the code below.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">percent_missing</span><span class="p">(</span><span class="n">df</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="c1"># # of rows x # of columns using numpy product function</span>
    <span class="n">total_data_points</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
    <span class="n">total_missing</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">total_missing</span><span class="o">/</span><span class="n">total_data_points</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span>

<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;{percent_missing(df)}&#34;</span><span class="o">%</span><span class="p">)</span>
</code></pre></div><p>Output:</p>
<pre><code>3.863904504129364%
</code></pre><h2 id="drop-rows-with-missing-values">Drop rows with missing values</h2>
<p>An approach to handle missing data is just to drop all rows containing missing values. Again, the decision needs to be made after a careful analysis. But, if we decide to drop the rows, the code is quite simple.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>
</code></pre></div><h2 id="drop-columns-with-missing-values">Drop columns with missing values</h2>
<p>If we decide to drop the columns instead, we just say that to the <code>dropna()</code> method with the axis parameter.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><h2 id="fill-in-missing-values">Fill in missing values</h2>
<p>Even though, if we don&rsquo;t want to drop the rows or columns, we may fill the cells with some data. As always, we need to analyze and decide which data we will fill with. Some approaches are: fill with <code>0</code>, with blank space, with the most common value observed in that column, with the last or the next valid value observed, with statistics measurements like <code>mean</code> or <code>median</code>, and so on.</p>
<h4 id="using-pandas">Using pandas</h4>
<p>Pandas has the <code>fillna()</code> method to deal with it. We specify the value we want to fill and pass it as an argument to the method. In the code below we are filling all missing cells with <code>0</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div><h4 id="using-scikit-learn">Using Scikit-Learn</h4>
<p>With scikit-learn, we have more sophisticated ways to deal with the problem. For example, we may fill a categorical column with the most frequent value observed on it, or fill a numerical column with the mean value of the data. The sklearn <code>SimpleImputer</code> class has many strategies for imputing data as you can see in its documentation. The code below uses the <code>most_frequent</code> strategy, that</p>
<blockquote>
<p>replace missing using the most frequent value along each column. Can be used with strings or numeric data.</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.impute</span> <span class="kn">import</span> <span class="n">SimpleImputer</span>
<span class="n">imputer</span> <span class="o">=</span> <span class="n">SimpleImputer</span><span class="p">(</span><span class="n">strategy</span><span class="o">=</span><span class="s1">&#39;most_frequent&#39;</span><span class="p">)</span>
<span class="n">new_df</span> <span class="o">=</span> <span class="n">imputer</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></div><p>In a future article, I will cover in more detail the use of scikit-learn. See you!</p>
<h3 id="documentation">Documentation</h3>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html">Pandas dropna()</a></p>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html">Pandas fillna()</a></p>
<p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html">Scikit-learn SimpleImputer()</a></p>
]]></content>
		</item>
		
		<item>
			<title>Weeknotes 2: Back to day work, some instability, and NLP</title>
			<link>https://thalesbruno.github.io/posts/weeknotes-2-back-to-work-instability-nlp/</link>
			<pubDate>Sun, 19 Jul 2020 17:53:17 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/weeknotes-2-back-to-work-instability-nlp/</guid>
			<description>The last week wasn&amp;rsquo;t the most productive week in my life for sure&amp;hellip; I have come back to work after a quite short 10-day vacation and I think that my anxiety about the return pushed me down.
Entertainment Not much entertainment last week for me, but I watched English Football on most days. Since the return of the Football in England after the Pandemic outbreak, there are matches almost every single day.</description>
			<content type="html"><![CDATA[<p>The last week wasn&rsquo;t the most productive week in my life for sure&hellip; I have come back to work after a quite short 10-day vacation and I think that my anxiety about the return pushed me down.</p>
<h2 id="entertainment">Entertainment</h2>
<p>Not much entertainment last week for me, but I watched English Football on most days. Since the return of the Football in England after the Pandemic outbreak, there are matches almost every single day.</p>
<h2 id="english">English</h2>
<p>Nothing special in my English study. I didn&rsquo;t watch movies or TV shows this week, but I still have seen YouTube channels and news.</p>
<h2 id="data-science">Data Science</h2>
<p>I have made my first contact with Natural Language Processing (NLP) and I like it pretty much. I think it is an incredible area with so many possibilities&hellip; Next week I will see a bit more contents and have some practice to stay more familiar with NLP. I keep looking for an area to chose and stay focused on, and I am not sure about anyone yet, but NLP is one of the options absolutely.</p>
<h2 id="next-week">Next Week</h2>
<p>For the next week, I hope I can do things better. I am not happy with my productivity in the past week, but I know that it is normal some instability among the time, and I need to keep going and don&rsquo;t allow any frustration or depressed feelings to let me down.</p>
]]></content>
		</item>
		
		<item>
			<title>Mean, Median, and Mode</title>
			<link>https://thalesbruno.github.io/posts/mean-median-mode/</link>
			<pubDate>Tue, 14 Jul 2020 15:49:30 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/mean-median-mode/</guid>
			<description>In this article, we are talking about the common methods to measure the central tendency of the data, that is a way to explain our data in some manner. Although these measurements are quite simple, they are a foundation for a lot of other more complex measurements.
We will use this fake list of grades of a class below to demonstrate the concepts:
   Grades     9.</description>
			<content type="html"><![CDATA[<p>In this article, we are talking about the common methods to <strong>measure the central tendency of the data</strong>, that is a way to explain our data in some manner. Although these measurements are quite simple, they are a foundation for a lot of other more complex measurements.</p>
<p>We will use this fake list of grades of a class below to demonstrate the concepts:</p>
<table>
<thead>
  <tr>
    <th>Grades</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>9.2</td>
  </tr>
  <tr>
    <td>7.5</td>
  </tr>
  <tr>
    <td>8</td>
  </tr>
  <tr>
     <td>9</td>
  </tr>
  <tr>
     <td>8.5</td>
  </tr>
  <tr>
     <td>8</td>
  </tr>
  <tr>
     <td>2.5</td>
  </tr>
</tbody>
</table>
<p>We create a Python variable to store the grades:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">grades</span> <span class="o">=</span> <span class="p">[</span><span class="mf">9.2</span><span class="p">,</span> <span class="mf">7.5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mf">8.5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">]</span>
</code></pre></div><h2 id="mean">Mean</h2>
<p>The first one is the <strong>mean</strong>, which is the arithmetic average of the data. To calculate the mean of a set of numeric data, we take the sum of all observations divided by the number of observations.</p>
<p>In Python:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">def</span> <span class="nf">mean</span><span class="p">(</span><span class="n">xs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
  <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span>
</code></pre></div><p>So, applying in our grades data: <code>mean(grades)</code> gives us <code>~7.52</code>.</p>
<h2 id="median">Median</h2>
<p>The second one is the <strong>median</strong>, which gives us something more <em>positional</em>. The median is the exact central value of a data, so to calculate it we need to:</p>
<ul>
<li>Sort data from smaller to largest, and</li>
<li>If ODD length: pick up the middle value</li>
<li>If EVEN length: calculate the mean of the two middle values</li>
</ul>
<p>So, in Python could be like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">median</span><span class="p">(</span><span class="n">xs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
  <span class="n">s</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span>
  <span class="c1"># If odd lenght, just pick up the middle value</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[</span><span class="n">p</span><span class="p">]</span>
  <span class="c1"># If even lenght, take the mean of the left and right middle values</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">l_p</span> <span class="o">=</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="n">r_p</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">mid_values</span> <span class="o">=</span> <span class="p">[</span><span class="n">l_p</span><span class="p">,</span> <span class="n">r_p</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">mean</span><span class="p">(</span><span class="n">mid_values</span><span class="p">)</span>
</code></pre></div><p>This way, the grades sorted looks like this: <code>[2.5, 7.5, 8, 8, 8.5, 9, 9.2]</code> and their median, <code>median(grades)</code>, is <code>8</code>.</p>
<h2 id="mode">Mode</h2>
<p>Finally, we have the <strong>mode</strong>, i.e., the observation that occurs the most in a dataset. Thus, a dataset may have <em>one</em>, <em>multiple</em>, or even <em>none</em> mode.</p>
<p>Python mode function:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="k">def</span> <span class="nf">mode</span><span class="p">(</span><span class="n">xs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">float</span><span class="p">]:</span>
  <span class="n">counter</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span>
  <span class="k">return</span> <span class="p">[</span><span class="n">x_i</span> <span class="k">for</span> <span class="n">x_i</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">counter</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="nb">max</span><span class="p">(</span><span class="n">counter</span><span class="o">.</span><span class="n">values</span><span class="p">())]</span>
</code></pre></div><p>The grade that occurs the most in our dataset is <code>[8]</code> as we can see calling <code>mode(grades)</code></p>
<h2 id="python-mean-median-and-mode">Python mean, median, and mode</h2>
<p>In this article, we made some Python code to illustrate our measurements, just as didactic purposes. By the way, we already have functions in Python libraries that make the job. Bellow, some of them:</p>
<ul>
<li>Mean: <a href="https://numpy.org/doc/stable/reference/generated/numpy.mean.html">numpy.mean</a></li>
<li>Median: <a href="https://numpy.org/doc/stable/reference/generated/numpy.median.html?highlight=median#numpy.median">numpy.median</a></li>
<li>Mode: <a href="https://docs.python.org/3.4/library/statistics.html#statistics.mode">statistics.mode</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Weeknotes 1: the Beginning</title>
			<link>https://thalesbruno.github.io/posts/weeknotes-1-the-beginning/</link>
			<pubDate>Sat, 11 Jul 2020 20:05:41 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/weeknotes-1-the-beginning/</guid>
			<description>I have decided to begin this weeknotes series here in my blog to keep me writing. As I say in the About section, I am trying to change my career, and this is such a really big project that will affect all my life and even the life of people around me. So I am dedicating time and energy to make this possible, and it will.
English Last week was one more week of English learning and English improvement as well.</description>
			<content type="html"><![CDATA[<p>I have decided to begin this weeknotes series here in my blog to keep me writing.  As I say in the About section, I am trying to change my career, and this is such a really big project that will affect all my life and even the life of people around me. So I am dedicating time and energy to make this possible, and it will.</p>
<h2 id="english">English</h2>
<p>Last week was one more week of English learning and English improvement as well. I think I am doing this very well since I am not spending any money on courses, lessons, or minutes of conversation with natives. My learning routine includes YouTube lessons, Movies and TV Series with English audio and subtitles, English TV Channels, and all Data Science content I am stuying in English.</p>
<h2 id="entertainment">Entertainment</h2>
<p>I watched a few things last week as usual. Interstellar was the most significant for sure! I fell in love with the Sci-Fi genre since I watched Dark, and Interstellar already became one of my favorite films ever. I just finished a short film on YouTube right now called Voskhod, the same genre, pretty good, and what is better: it&rsquo;s from a sci-fi brand called DUST, and there is a lot of content in their YouTube Channel. So I think I will talk about them in every weeknote for a long time.</p>
<h2 id="machine-learning">Machine Learning</h2>
<p>Finally, I have done my fourth course at Kaggle: Intermediary Machine Learning. I am quite excited about this stuff and now I am going to begin with the competitions. At the same time, I am studying Statistics on this amazing YouTube Playlist.</p>
<p>Enough weeknote for now. Next week I am going to be back.</p>
]]></content>
		</item>
		
		<item>
			<title>Don&#39;t use Pie Charts</title>
			<link>https://thalesbruno.github.io/posts/dont-use-pie-charts/</link>
			<pubDate>Thu, 09 Jul 2020 20:42:13 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/dont-use-pie-charts/</guid>
			<description>Despite the clickbait title, this is not an article to be polemic or say universal truths, but just an invitation to think about it.
A pie chart, sometimes called a pizza chart, is a chart in a format that seems like a - guess what? - pie, i.e., a round shape divided into slices. According to this article:
 A pie chart is a circular graph that shows the relative contribution that different categories contribute to an overall total.</description>
			<content type="html"><![CDATA[<p>Despite the clickbait title, this is not an article to be polemic or say universal truths, but just an invitation to think about it.</p>
<p>A pie chart, sometimes called a pizza chart, is a chart in a format that seems like a - guess what? - pie, i.e., a round shape divided into slices. According to this <a href="https://www2.le.ac.uk/offices/ld/all-resources/numerical-data/pie-charts">article</a>:</p>
<blockquote>
<p><em>A pie chart is a circular graph that shows the relative contribution that different categories contribute to an overall total.</em></p>
</blockquote>
<p>So, each piece of the chart has its width defined for its proportional value into an overall total.</p>
<p>Let&rsquo;s take a look at an example.</p>
<figure>
    <img src="/img/pie-charts-simple.png"
         alt="Simple pie chart"/> 
</figure>

<p>We see it&rsquo;s not a bad look chart for sure. Actually, it could be a pretty evident option if we have some category variable to analyze and plot. But the point <a href="https://verstaresearch.com/blog/why-you-should-avoid-pie-charts/">many people say</a> about avoiding them is because pie charts may don&rsquo;t do a good job showing the proportions of the parts vs. the whole or even if a piece is greater or less than the others if they have the same size, etc.</p>
<p>When the number of categories increases the problem seems clear:</p>
<figure>
    <img src="/img/pie-charts-complex.png"
         alt="Pie chart with many categories"/> 
</figure>

<p>A bar chart plotting the same data:</p>
<figure>
    <img src="/img/pie-charts-bar.png"
         alt="Bar plot"/> 
</figure>

<p>Then, as we may see, pie charts are a bit controversial and should be avoided in most cases. Tough with a few categories, maybe only two, they could not be a terrible choice as well. What do you think?</p>
<h2 id="references">References</h2>
<p>Pie Charts in Python <a href="https://plotly.com/python/pie-charts/">🔎</a></p>
<p>University of Leicester | Pie charts <a href="https://www2.le.ac.uk/offices/ld/all-resources/numerical-data/pie-charts">🔎</a></p>
<p>Why You Should Avoid Pie Charts <a href="https://verstaresearch.com/blog/why-you-should-avoid-pie-charts/">🔎</a></p>
]]></content>
		</item>
		
		<item>
			<title>Numerical Variables</title>
			<link>https://thalesbruno.github.io/posts/numerical-variables/</link>
			<pubDate>Wed, 08 Jul 2020 17:07:28 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/numerical-variables/</guid>
			<description>Numerical variables, also known as quantitative variables, are the type of data that represent something measurable or countable like frequency, measurement, etc. Another attribute of numerical variables is that they are always numbers that can be placed in a meaningful order with consistent intervals.
As examples of quantitative variables we may mention:
 Weight Height Sales Production units Movie Ratings  Discrete and continuous Numerical variables may be either discrete or continuous.</description>
			<content type="html"><![CDATA[<p>Numerical variables, also known as quantitative variables, are the type of data that represent something measurable or countable like frequency, measurement, etc. Another attribute of numerical variables is that they are always numbers that can be placed in a meaningful order with consistent intervals.</p>
<p>As examples of quantitative variables we may mention:</p>
<ul>
<li>Weight</li>
<li>Height</li>
<li>Sales</li>
<li>Production units</li>
<li>Movie Ratings</li>
</ul>
<h2 id="discrete-and-continuous">Discrete and continuous</h2>
<p>Numerical variables may be either discrete or continuous.</p>
<p>Discrete values are the result of counting, like when we count how many goals a football team has scored in a season. Here, the data take certain numerical values, like 60, 65, 72, and so on.</p>
<p>On the other hand, continuous values are the result of a measurement. For instance, we may measure the weights in kilograms of football team players, and the data will assume continuous values inside a range, like 84.1kg, 74.89483kg.</p>
<h2 id="buckets-and-bins">Buckets and bins</h2>
<p>Buckets and bins are the way we may organize the numerical data collected in a meaningful order with consistent intervals to analyze and make insights from them. For example, we might collect the number of movies produced in the 20th Century and put them in buckets of 10 years, and as result, we could see the evolution of the Movie Industry in the last century.</p>
<p>But in this article, we will demonstrate a bit of numerical data using the Kaggle <a href="https://www.kaggle.com/lava18/google-play-store-apps">Google Play Store Apps</a> dataset from <a href="https://www.kaggle.com/lava18">Lavanya Gupta</a> as we did in the article about <a href="https://thalesbr.uno/posts/categorical-variables/">Categorical Variables</a>.</p>
<p>Using pandas, we will load the dataset, but only the Rating column, which is a typical numerical variable. The users rated the Apps from 1.0 to 5.0.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="kn">as</span> <span class="nn">px</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;./data/googleplaystore.csv&#34;</span><span class="p">,</span> <span class="n">usecols</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Rating&#39;</span><span class="p">])</span>

<span class="c1"># Drop missing values</span>
<span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">ratings</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">Rating</span>

<span class="c1"># Drop a outline rating of 19.0 (from some error)</span>
<span class="n">ratings</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="mi">10472</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Plot a histogram</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">ratings</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Rating&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Google Play Store Apps Ratings&#39;</span><span class="p">,</span> <span class="n">template</span><span class="o">=</span><span class="s2">&#34;simple_white&#34;</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><figure>
    <img src="/img/numerical-variables-histogram.png"
         alt="Histogram"/> 
</figure>

<h2 id="histogram">Histogram</h2>
<p>The chart we see above is a Histogram, which seems like the Bar Chart we&rsquo;ve plotted in the Categorical Variable post, but actually they have some important differences. In a Histogram there is no space between the bars, and the intervals are equally spaced, as expected to numerical values.</p>
<p>The shape of the histogram already gives us useful information. The histogram above is left-skewed (it has a tail to the left), so we may conclude that most Apps were well evaluated because the highest rectangles are on the right side of the histogram, where we have the highest rates (between 4.0 and 5.0).</p>
<p>Other shapes a histogram can have are right skew, symmetric, bimodal, uniform. Perhaps we will see more examples of histogram shapes in the next posts!</p>
<h2 id="references">References</h2>
<p><strong>courses.lumenlearning.com</strong> | 1.2 Data: Quantitative Data &amp; Qualitative Data <a href="https://courses.lumenlearning.com/odessa-introstats1-1/chapter/sampling-and-data/">🔎</a><br>
<strong>online.stat.psu.edu</strong> | 1.1.1 - Categorical &amp; Quantitative Variables <a href="https://online.stat.psu.edu/stat200/lesson/1/1.1/1.1.1">🔎</a><br>
<strong>YouTube</strong> | Brandon Foltz | Statistics 101: Descriptive Statistics, Histograms
<a href="https://www.youtube.com/watch?v=zC3GaPBJ4c4">🔎</a></p>
]]></content>
		</item>
		
		<item>
			<title>Categorical Variables</title>
			<link>https://thalesbruno.github.io/posts/categorical-variables/</link>
			<pubDate>Tue, 07 Jul 2020 17:10:09 -0300</pubDate>
			
			<guid>https://thalesbruno.github.io/posts/categorical-variables/</guid>
			<description>A categorical variable (sometimes called a nominal variable) is a variable that can assume one of a limited number of possible values described as categories and there is no intrinsic ordering to the categories. It uses labels, names, or other descriptors (even numbers) to identify exclusive categories or types of things.
As an example of a categorical variable we may mention Nationality having values like Brazilian, Canadian, French, etc., and we can see that there is no ordering between the values: we cannot say that Brazilian is higher than Canadian.</description>
			<content type="html"><![CDATA[<p>A categorical variable (sometimes called a nominal variable) is a variable that can assume one of a limited number of possible values described as categories and there is no intrinsic ordering to the categories. It uses labels, names, or other descriptors (even numbers) to identify <em>exclusive</em> categories or types of things.</p>
<p>As an example of a categorical variable we may mention <strong>Nationality</strong> having values like <em>Brazilian, Canadian, French, etc.</em>, and we can see that there is no ordering between the values: we cannot say that Brazilian is higher than Canadian. In summary, there is no way to order these categories from highest to lowest or from best to worst.</p>
<p>Other examples of categorical variables could be <strong>Regions</strong> (<em>North, South, East, West</em>), <strong>Blood Type</strong> (<em>A, B, AB, O</em>) or <strong>Smartphone Brand</strong> (<em>Apple, Samsumg, LG, Xiami</em>).</p>
<p>However, if there is a clear order between the categories, so we are dealing with an ordinal variable, that is very similar to a categorical variable and often it&rsquo;s considered a special kind of this and placed on between categorical and quantitative variables. An example of an ordinal variable could be Educational Level (<em>Elementary school education, High school graduate, Some college, College graduate, Graduate degree</em>).</p>
<p>But in this article we are focusing on pure categorical or nominal variables, so let&rsquo;s check out what we can do with some categorical data.</p>
<h2 id="frequency-distribution">Frequency distribution</h2>
<p>Since we have a dataset with some categorical variables, the most common thing we can do is count the occurences of each category in the whole data. This will give us a frequency distribution.</p>
<p>Let&rsquo;s take a look at some real data to demonstrate a frequency distribution. We will use the Kaggle <a href="https://www.kaggle.com/lava18/google-play-store-apps">Google Play Store Apps</a> dataset from <a href="https://www.kaggle.com/lava18">Lavanya Gupta</a>. This dataset has more than 10,000 rows, each of them is an app from Google Play Store, and as features (columns) we can see the App name, Category, Rating, and others.</p>
<p>We will use pandas for handling the data. Firstly, we import pandas and read the CSV file downloaded from Kaggle, but only the <em>Category</em> column. Then, we use the <code>unique</code> method to show all values observed in our data. As we can see, there are 34 App Categories in our categorical variable, like <em>Finance, Sports, Weathers</em> and others and we can&rsquo;t see any order between them (<em>Events</em> category is not better or higher than <em>Shopping</em> category, for instance).</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;./data/googleplaystore.csv&#34;</span><span class="p">,</span> <span class="n">usecols</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Category&#39;</span><span class="p">])</span>
<span class="n">categories</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;Category&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;{len(categories)} categories:&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span>
</code></pre></div><pre><code>34 categories:
['ART_AND_DESIGN' 'AUTO_AND_VEHICLES' 'BEAUTY' 'BOOKS_AND_REFERENCE'
 'BUSINESS' 'COMICS' 'COMMUNICATION' 'DATING' 'EDUCATION' 'ENTERTAINMENT'
 'EVENTS' 'FINANCE' 'FOOD_AND_DRINK' 'HEALTH_AND_FITNESS' 'HOUSE_AND_HOME'
 'LIBRARIES_AND_DEMO' 'LIFESTYLE' 'GAME' 'FAMILY' 'MEDICAL' 'SOCIAL'
 'SHOPPING' 'PHOTOGRAPHY' 'SPORTS' 'TRAVEL_AND_LOCAL' 'TOOLS'
 'PERSONALIZATION' 'PRODUCTIVITY' 'PARENTING' 'WEATHER' 'VIDEO_PLAYERS'
 'NEWS_AND_MAGAZINES' 'MAPS_AND_NAVIGATION' '1.9']
</code></pre>
<p>Now that we know all category values we can have, let&rsquo;s count how many times every category occurs in our data using <code>value_counts</code> method.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">frequency</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;Category&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>

<span class="c1"># frequency is a pandas Series, so we&#39;ll transform it in a DataFrame just for presentation purposes</span>
<span class="n">frequency_dist</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">frequency</span><span class="p">)</span>
<span class="n">frequency_dist</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Frequency&#39;</span><span class="p">]</span>
<span class="n">frequency_dist</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Category&#39;</span>

<span class="c1"># Using head(10) to show only the first 10 lines</span>
<span class="n">frequency_dist</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><div>
<table>
  <thead>
    <tr>
      <th></th>
      <th>Frequency</th>
    </tr>
    <tr>
      <th>Category</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>FAMILY</th>
      <td>1972</td>
    </tr>
    <tr>
      <th>GAME</th>
      <td>1144</td>
    </tr>
    <tr>
      <th>TOOLS</th>
      <td>843</td>
    </tr>
    <tr>
      <th>MEDICAL</th>
      <td>463</td>
    </tr>
    <tr>
      <th>BUSINESS</th>
      <td>460</td>
    </tr>
    <tr>
      <th>PRODUCTIVITY</th>
      <td>424</td>
    </tr>
    <tr>
      <th>PERSONALIZATION</th>
      <td>392</td>
    </tr>
    <tr>
      <th>COMMUNICATION</th>
      <td>387</td>
    </tr>
    <tr>
      <th>SPORTS</th>
      <td>384</td>
    </tr>
    <tr>
      <th>LIFESTYLE</th>
      <td>382</td>
    </tr>
  </tbody>
</table>
</div>
<p>So, we can see above that most apps are from the <em>Family</em> category with 1,972 occurrences. <em>Game</em> and <em>Tools</em> are also common categories, on the other hand, there are few apps from the <em>Beauty</em> category.</p>
<h2 id="relative-frequency">Relative Frequency</h2>
<p>At the moment we already know how many apps we have from each category. But what if we wanted to figure out what is the percentage of Medical apps of all apps? Then we need to calculate the relative frequency of category apps dividing the frequency by the total number of apps (aka the sample data).</p>
<p>Relative frequency of something = Frequency of something / n</p>
<p>Again, we will use the marvelous pandas. The relative frequency must assume a value from 0 to 1, but here we will multiply it by 100 and show the values in percentage form instead. So, as you can see below, Medical apps represent approximately 4.27% of all apps in Google Play Store according to our dataset.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">frequency_dist</span><span class="p">[</span><span class="s1">&#39;Relative Frequency (%)&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">frequency_dist</span><span class="p">[</span><span class="s1">&#39;Frequency&#39;</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">frequency_dist</span><span class="p">[</span><span class="s1">&#39;Frequency&#39;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>

<span class="c1"># Using head(10) to show only the first 10 lines</span>
<span class="n">frequency_dist</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><div>
<table>
  <thead>
    <tr>
      <th></th>
      <th>Frequency</th>
      <th>Relative Frequency (%)</th>
    </tr>
    <tr>
      <th>Category</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>FAMILY</th>
      <td>1972</td>
      <td>18.190204</td>
    </tr>
    <tr>
      <th>GAME</th>
      <td>1144</td>
      <td>10.552532</td>
    </tr>
    <tr>
      <th>TOOLS</th>
      <td>843</td>
      <td>7.776035</td>
    </tr>
    <tr>
      <th>MEDICAL</th>
      <td>463</td>
      <td>4.270824</td>
    </tr>
    <tr>
      <th>BUSINESS</th>
      <td>460</td>
      <td>4.243151</td>
    </tr>
    <tr>
      <th>PRODUCTIVITY</th>
      <td>424</td>
      <td>3.911078</td>
    </tr>
    <tr>
      <th>PERSONALIZATION</th>
      <td>392</td>
      <td>3.615903</td>
    </tr>
    <tr>
      <th>COMMUNICATION</th>
      <td>387</td>
      <td>3.569781</td>
    </tr>
    <tr>
      <th>SPORTS</th>
      <td>384</td>
      <td>3.542109</td>
    </tr>
    <tr>
      <th>LIFESTYLE</th>
      <td>382</td>
      <td>3.523660</td>
    </tr>
  </tbody>
</table>
</div>
<h2 id="frequency-bar-chart">Frequency Bar Chart</h2>
<p>Finally, we will plot the frequency variable in a Bar Chart that is a pretty common way to visualize categorical data.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>

<span class="n">frequency</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Frequency Distribution of Google Play Store app categories&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Frequency&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><figure>
    <img src="/img/categorical-variables-bar-chart.png"
         alt="Bar Chart"/> 
</figure>

<p>So, in this article we have seen a bit about Categorical Variables or Nominal Variables, which is a pretty usual data type we face in Statistics, Data Analysis, Machine Learning, and so on. It was just an introductory content, but we may cover it a little deeper in upcoming posts.</p>
<h2 id="references">References</h2>
<p><strong>Wikipedia</strong> | Categorical variable <a href="https://en.wikipedia.org/wiki/Categorical_variable">🔎</a><br>
<strong>UCLA</strong> | WHAT IS THE DIFFERENCE BETWEEN CATEGORICAL, ORDINAL AND NUMERICAL VARIABLES? <a href="https://stats.idre.ucla.edu/other/mult-pkg/whatstat/what-is-the-difference-between-categorical-ordinal-and-numerical-variables/">🔎</a><br>
<strong>YouTube</strong> | Brandon Foltz | Statistics 101: Describing a Categorical Variable
<a href="https://www.youtube.com/watch?v=vrWYw8d2830">🔎</a><br>
<strong>web.ma.utexas.edu</strong> | Ordinal Variables <a href="https://web.ma.utexas.edu/users/mks/statmistakes/ordinal.html">🔎</a></p>
]]></content>
		</item>
		
	</channel>
</rss>
